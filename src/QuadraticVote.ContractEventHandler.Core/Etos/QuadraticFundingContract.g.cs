// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: quadratic_funding_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.QuadraticFunding {

  /// <summary>Holder for reflection information generated from quadratic_funding_contract.proto</summary>
  public static partial class QuadraticFundingContractReflection {

    #region Descriptor
    /// <summary>File descriptor for quadratic_funding_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuadraticFundingContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBxdWFkcmF0aWNfZnVuZGluZ19jb250cmFjdC5wcm90bxIQUXVhZHJhdGlj",
            "RnVuZGluZxoPYWVsZi9jb3JlLnByb3RvGhJhZWxmL29wdGlvbnMucHJvdG8a",
            "CmFjczEucHJvdG8aFXRyYW5zYWN0aW9uX2ZlZS5wcm90bxoUYXV0aG9yaXR5",
            "X2luZm8ucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90bxoeZ29v",
            "Z2xlL3Byb3RvYnVmL3dyYXBwZXJzLnByb3RvGh9nb29nbGUvcHJvdG9idWYv",
            "dGltZXN0YW1wLnByb3RvInEKD0luaXRpYWxpemVJbnB1dBIcCgVvd25lchgB",
            "IAEoCzINLmFlbGYuQWRkcmVzcxITCgt2b3RlX3N5bWJvbBgCIAEoCRIZChFi",
            "YXNpY192b3RpbmdfdW5pdBgDIAEoAxIQCghpbnRlcnZhbBgEIAEoAyIyCg9C",
            "YW5Qcm9qZWN0SW5wdXQSEgoKcHJvamVjdF9pZBgBIAEoCRILCgNiYW4YAiAB",
            "KAgiLgoJVm90ZUlucHV0EhIKCnByb2plY3RfaWQYASABKAkSDQoFdm90ZXMY",
            "AiABKAMiOAoSVGFrZU91dEdyYW50c0lucHV0EhIKCnByb2plY3RfaWQYASAB",
            "KAkSDgoGYW1vdW50GAIgASgDIpQBCgdQcm9qZWN0Eg0KBXJvdW5kGAEgASgD",
            "Ei0KCWNyZWF0ZV9hdBgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3Rh",
            "bXASEwoLdG90YWxfdm90ZXMYBCABKAMSDgoGZ3JhbnRzGAUgASgDEhQKDHN1",
            "cHBvcnRfYXJlYRgGIAEoAxIQCgh3aXRoZHJldxgHIAEoAyIcCgtQcm9qZWN0",
            "TGlzdBINCgV2YWx1ZRgBIAMoCSJFChhHZXRQYWdlZFJhbmtpbmdMaXN0SW5w",
            "dXQSDQoFcm91bmQYASABKAMSDAoEcGFnZRgCIAEoAxIMCgRzaXplGAMgASgD",
            "Il0KC1JhbmtpbmdMaXN0EgwKBHVuaXQYASABKAMSEAoIcHJvamVjdHMYAiAD",
            "KAkSDQoFdm90ZXMYAyADKAMSDwoHc3VwcG9ydBgEIAMoAxIOCgZncmFudHMY",
            "BSADKAMikQEKCVJvdW5kSW5mbxIuCgpzdGFydF9mcm9tGAEgASgLMhouZ29v",
            "Z2xlLnByb3RvYnVmLlRpbWVzdGFtcBIqCgZlbmRfYXQYAiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEg8KB3N1cHBvcnQYAyABKAMSFwoPcHJl",
            "X3RheF9zdXBwb3J0GAQgASgDIlQKEkdldFZvdGluZ0Nvc3RJbnB1dBIbCgRm",
            "cm9tGAEgASgLMg0uYWVsZi5BZGRyZXNzEhIKCnByb2plY3RfaWQYAiABKAkS",
            "DQoFdm90ZXMYAyABKAMiKwoKVm90aW5nQ29zdBIMCgRjb3N0GAEgASgDEg8K",
            "B3ZvdGFibGUYAiABKAgiJQoGR3JhbnRzEgwKBHJlc3QYASABKAMSDQoFdG90",
            "YWwYAiABKAMiRgoXQ2FsY3VsYXRlUHJvamVjdElkSW5wdXQSHgoHYWRkcmVz",
            "cxgBIAEoCzINLmFlbGYuQWRkcmVzcxILCgNiaWQYAiABKAUiaAoSRGFuZ2Vy",
            "U2V0VGltZUlucHV0EikKBXN0YXJ0GAEgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBInCgNlbmQYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGlt",
            "ZXN0YW1wIkIKDVByb2plY3RCYW5uZWQSDwoHcHJvamVjdBgBIAEoCRILCgNi",
            "YW4YAiABKAgSDQoFcm91bmQYAyABKAM6BKC7GAEiKgoPVGF4UG9pbnRDaGFu",
            "Z2VkEhEKCXRheF9wb2ludBgBIAEoAzoEoLsYASIuChRSb3VuZEludGVydmFs",
            "Q2hhbmdlZBIQCghpbnRlcnZhbBgBIAEoAzoEoLsYASIuChFWb3RpbmdVbml0",
            "Q2hhbmdlZBITCgt2b3RpbmdfdW5pdBgBIAEoAzoEoLsYASKPAQoFVm90ZWQS",
            "HgoHYWNjb3VudBgBIAEoCzINLmFlbGYuQWRkcmVzcxIPCgdwcm9qZWN0GAIg",
            "ASgJEgwKBHZvdGUYAyABKAMSDQoFcm91bmQYBCABKAMSDgoGZ3JhbnRzGAUg",
            "ASgDEhQKDHN1cHBvcnRfYXJlYRgGIAEoAxIMCgRjb3N0GAcgASgDOgSguxgB",
            "IlsKD1Byb2plY3RVcGxvYWRlZBIfCgh1cGxvYWRlchgBIAEoCzINLmFlbGYu",
            "QWRkcmVzcxISCgpwcm9qZWN0X2lkGAIgASgJEg0KBXJvdW5kGAMgASgDOgSg",
            "uxgBIjYKDlN1cHBvcnRVcGRhdGVkEg8KB3N1cHBvcnQYASABKAMSDQoFcm91",
            "bmQYAiABKAM6BKC7GAEiIwoMUm91bmRTdGFydGVkEg0KBXJvdW5kGAEgASgD",
            "OgSguxgBMswRChhRdWFkcmF0aWNGdW5kaW5nQ29udHJhY3QSSQoKSW5pdGlh",
            "bGl6ZRIhLlF1YWRyYXRpY0Z1bmRpbmcuSW5pdGlhbGl6ZUlucHV0GhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASPQoJUm91bmRPdmVyEhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNgoLQ2hh",
            "bmdlT3duZXISDS5hZWxmLkFkZHJlc3MaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJJCgpCYW5Qcm9qZWN0EiEuUXVhZHJhdGljRnVuZGluZy5CYW5Qcm9q",
            "ZWN0SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJECgtTZXRUYXhQ",
            "b2ludBIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASRAoLU2V0SW50ZXJ2YWwSGy5nb29nbGUucHJvdG9i",
            "dWYuSW50NjRWYWx1ZRoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkYKDVNl",
            "dFZvdGluZ1VuaXQSGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRoWLmdv",
            "b2dsZS5wcm90b2J1Zi5FbXB0eSIAEj4KClJvdW5kU3RhcnQSFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI8CghX",
            "aXRoZHJhdxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2dsZS5wcm90",
            "b2J1Zi5FbXB0eSIAEk8KDURhbmdlclNldFRpbWUSJC5RdWFkcmF0aWNGdW5k",
            "aW5nLkRhbmdlclNldFRpbWVJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEj8KBkRvbmF0ZRIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASTAoNVXBsb2FkUHJvamVjdBIbLmdv",
            "b2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlGhwuZ29vZ2xlLnByb3RvYnVmLlN0",
            "cmluZ1ZhbHVlIgASPQoEVm90ZRIbLlF1YWRyYXRpY0Z1bmRpbmcuVm90ZUlu",
            "cHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASTwoNVGFrZU91dEdyYW50",
            "cxIkLlF1YWRyYXRpY0Z1bmRpbmcuVGFrZU91dEdyYW50c0lucHV0GhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASUwoOR2V0QWxsUHJvamVjdHMSGy5nb29n",
            "bGUucHJvdG9idWYuSW50NjRWYWx1ZRodLlF1YWRyYXRpY0Z1bmRpbmcuUHJv",
            "amVjdExpc3QiBYiJ9wEBElMKDkdldFJhbmtpbmdMaXN0EhsuZ29vZ2xlLnBy",
            "b3RvYnVmLkludDY0VmFsdWUaHS5RdWFkcmF0aWNGdW5kaW5nLlJhbmtpbmdM",
            "aXN0IgWIifcBARJnChNHZXRQYWdlZFJhbmtpbmdMaXN0EiouUXVhZHJhdGlj",
            "RnVuZGluZy5HZXRQYWdlZFJhbmtpbmdMaXN0SW5wdXQaHS5RdWFkcmF0aWNG",
            "dW5kaW5nLlJhbmtpbmdMaXN0IgWIifcBARJPCgxHZXRSb3VuZEluZm8SGy5n",
            "b29nbGUucHJvdG9idWYuSW50NjRWYWx1ZRobLlF1YWRyYXRpY0Z1bmRpbmcu",
            "Um91bmRJbmZvIgWIifcBARJaCg1HZXRWb3RpbmdDb3N0EiQuUXVhZHJhdGlj",
            "RnVuZGluZy5HZXRWb3RpbmdDb3N0SW5wdXQaHC5RdWFkcmF0aWNGdW5kaW5n",
            "LlZvdGluZ0Nvc3QiBYiJ9wEBEkwKC0dldEdyYW50c09mEhwuZ29vZ2xlLnBy",
            "b3RvYnVmLlN0cmluZ1ZhbHVlGhguUXVhZHJhdGljRnVuZGluZy5HcmFudHMi",
            "BYiJ9wEBEk4KDEdldFByb2plY3RPZhIcLmdvb2dsZS5wcm90b2J1Zi5TdHJp",
            "bmdWYWx1ZRoZLlF1YWRyYXRpY0Z1bmRpbmcuUHJvamVjdCIFiIn3AQESTQoP",
            "R2V0Q3VycmVudFJvdW5kEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29v",
            "Z2xlLnByb3RvYnVmLkludDY0VmFsdWUiBYiJ9wEBEkkKC0dldFRheFBvaW50",
            "EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29vZ2xlLnByb3RvYnVmLklu",
            "dDY0VmFsdWUiBYiJ9wEBEkQKBkdldFRheBIWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eRobLmdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJJCgtH",
            "ZXRJbnRlcnZhbBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRobLmdvb2dsZS5w",
            "cm90b2J1Zi5JbnQ2NFZhbHVlIgWIifcBARJLCg1HZXRWb3RpbmdVbml0EhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5GhsuZ29vZ2xlLnByb3RvYnVmLkludDY0",
            "VmFsdWUiBYiJ9wEBEmQKEkNhbGN1bGF0ZVByb2plY3RJZBIpLlF1YWRyYXRp",
            "Y0Z1bmRpbmcuQ2FsY3VsYXRlUHJvamVjdElkSW5wdXQaHC5nb29nbGUucHJv",
            "dG9idWYuU3RyaW5nVmFsdWUiBYiJ9wEBElIKD0lzUHJvamVjdEJhbm5lZBIc",
            "Lmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRoaLmdvb2dsZS5wcm90b2J1",
            "Zi5Cb29sVmFsdWUiBYiJ9wEBGlGyzPYBPUFFbGYuQ29udHJhY3RzLlF1YWRy",
            "YXRpY0Z1bmRpbmcuUXVhZHJhdGljRnVuZGluZ0NvbnRyYWN0U3RhdGXKyvYB",
            "CmFjczEucHJvdG9CIqoCH0FFbGYuQ29udHJhY3RzLlF1YWRyYXRpY0Z1bmRp",
            "bmdiBnByb3RvMw=="));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      voteSymbol_ = other.voteSymbol_;
      basicVotingUnit_ = other.basicVotingUnit_;
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Types.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "vote_symbol" field.</summary>
    public const int VoteSymbolFieldNumber = 2;
    private string voteSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VoteSymbol {
      get { return voteSymbol_; }
      set {
        voteSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "basic_voting_unit" field.</summary>
    public const int BasicVotingUnitFieldNumber = 3;
    private long basicVotingUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BasicVotingUnit {
      get { return basicVotingUnit_; }
      set {
        basicVotingUnit_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 4;
    private long interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (VoteSymbol != other.VoteSymbol) return false;
      if (BasicVotingUnit != other.BasicVotingUnit) return false;
      if (Interval != other.Interval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (VoteSymbol.Length != 0) hash ^= VoteSymbol.GetHashCode();
      if (BasicVotingUnit != 0L) hash ^= BasicVotingUnit.GetHashCode();
      if (Interval != 0L) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (VoteSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(VoteSymbol);
      }
      if (BasicVotingUnit != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BasicVotingUnit);
      }
      if (Interval != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (VoteSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VoteSymbol);
      }
      if (BasicVotingUnit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BasicVotingUnit);
      }
      if (Interval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Types.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.VoteSymbol.Length != 0) {
        VoteSymbol = other.VoteSymbol;
      }
      if (other.BasicVotingUnit != 0L) {
        BasicVotingUnit = other.BasicVotingUnit;
      }
      if (other.Interval != 0L) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Types.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            VoteSymbol = input.ReadString();
            break;
          }
          case 24: {
            BasicVotingUnit = input.ReadInt64();
            break;
          }
          case 32: {
            Interval = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BanProjectInput : pb::IMessage<BanProjectInput> {
    private static readonly pb::MessageParser<BanProjectInput> _parser = new pb::MessageParser<BanProjectInput>(() => new BanProjectInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BanProjectInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanProjectInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanProjectInput(BanProjectInput other) : this() {
      projectId_ = other.projectId_;
      ban_ = other.ban_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BanProjectInput Clone() {
      return new BanProjectInput(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ban" field.</summary>
    public const int BanFieldNumber = 2;
    private bool ban_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ban {
      get { return ban_; }
      set {
        ban_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BanProjectInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BanProjectInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Ban != other.Ban) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Ban != false) hash ^= Ban.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (Ban != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ban);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Ban != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BanProjectInput other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Ban != false) {
        Ban = other.Ban;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 16: {
            Ban = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteInput : pb::IMessage<VoteInput> {
    private static readonly pb::MessageParser<VoteInput> _parser = new pb::MessageParser<VoteInput>(() => new VoteInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInput(VoteInput other) : this() {
      projectId_ = other.projectId_;
      votes_ = other.votes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInput Clone() {
      return new VoteInput(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 2;
    private long votes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Votes {
      get { return votes_; }
      set {
        votes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Votes != other.Votes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Votes != 0L) hash ^= Votes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (Votes != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Votes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Votes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Votes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteInput other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Votes != 0L) {
        Votes = other.Votes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 16: {
            Votes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TakeOutGrantsInput : pb::IMessage<TakeOutGrantsInput> {
    private static readonly pb::MessageParser<TakeOutGrantsInput> _parser = new pb::MessageParser<TakeOutGrantsInput>(() => new TakeOutGrantsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TakeOutGrantsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOutGrantsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOutGrantsInput(TakeOutGrantsInput other) : this() {
      projectId_ = other.projectId_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TakeOutGrantsInput Clone() {
      return new TakeOutGrantsInput(this);
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 1;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TakeOutGrantsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TakeOutGrantsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProjectId != other.ProjectId) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProjectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProjectId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TakeOutGrantsInput other) {
      if (other == null) {
        return;
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProjectId = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Project : pb::IMessage<Project> {
    private static readonly pb::MessageParser<Project> _parser = new pb::MessageParser<Project>(() => new Project());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Project> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Project() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Project(Project other) : this() {
      round_ = other.round_;
      createAt_ = other.createAt_ != null ? other.createAt_.Clone() : null;
      totalVotes_ = other.totalVotes_;
      grants_ = other.grants_;
      supportArea_ = other.supportArea_;
      withdrew_ = other.withdrew_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Project Clone() {
      return new Project(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "create_at" field.</summary>
    public const int CreateAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp createAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp CreateAt {
      get { return createAt_; }
      set {
        createAt_ = value;
      }
    }

    /// <summary>Field number for the "total_votes" field.</summary>
    public const int TotalVotesFieldNumber = 4;
    private long totalVotes_;
    /// <summary>
    /// map&lt;string, int64> votes = 3; // Use State.VotedMap to record `votes`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalVotes {
      get { return totalVotes_; }
      set {
        totalVotes_ = value;
      }
    }

    /// <summary>Field number for the "grants" field.</summary>
    public const int GrantsFieldNumber = 5;
    private long grants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Grants {
      get { return grants_; }
      set {
        grants_ = value;
      }
    }

    /// <summary>Field number for the "support_area" field.</summary>
    public const int SupportAreaFieldNumber = 6;
    private long supportArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SupportArea {
      get { return supportArea_; }
      set {
        supportArea_ = value;
      }
    }

    /// <summary>Field number for the "withdrew" field.</summary>
    public const int WithdrewFieldNumber = 7;
    private long withdrew_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Withdrew {
      get { return withdrew_; }
      set {
        withdrew_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Project);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Project other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      if (!object.Equals(CreateAt, other.CreateAt)) return false;
      if (TotalVotes != other.TotalVotes) return false;
      if (Grants != other.Grants) return false;
      if (SupportArea != other.SupportArea) return false;
      if (Withdrew != other.Withdrew) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (createAt_ != null) hash ^= CreateAt.GetHashCode();
      if (TotalVotes != 0L) hash ^= TotalVotes.GetHashCode();
      if (Grants != 0L) hash ^= Grants.GetHashCode();
      if (SupportArea != 0L) hash ^= SupportArea.GetHashCode();
      if (Withdrew != 0L) hash ^= Withdrew.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Round);
      }
      if (createAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CreateAt);
      }
      if (TotalVotes != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalVotes);
      }
      if (Grants != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Grants);
      }
      if (SupportArea != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SupportArea);
      }
      if (Withdrew != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Withdrew);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (createAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateAt);
      }
      if (TotalVotes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalVotes);
      }
      if (Grants != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Grants);
      }
      if (SupportArea != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SupportArea);
      }
      if (Withdrew != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Withdrew);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Project other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      if (other.createAt_ != null) {
        if (createAt_ == null) {
          CreateAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        CreateAt.MergeFrom(other.CreateAt);
      }
      if (other.TotalVotes != 0L) {
        TotalVotes = other.TotalVotes;
      }
      if (other.Grants != 0L) {
        Grants = other.Grants;
      }
      if (other.SupportArea != 0L) {
        SupportArea = other.SupportArea;
      }
      if (other.Withdrew != 0L) {
        Withdrew = other.Withdrew;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Round = input.ReadInt64();
            break;
          }
          case 18: {
            if (createAt_ == null) {
              CreateAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(CreateAt);
            break;
          }
          case 32: {
            TotalVotes = input.ReadInt64();
            break;
          }
          case 40: {
            Grants = input.ReadInt64();
            break;
          }
          case 48: {
            SupportArea = input.ReadInt64();
            break;
          }
          case 56: {
            Withdrew = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectList : pb::IMessage<ProjectList> {
    private static readonly pb::MessageParser<ProjectList> _parser = new pb::MessageParser<ProjectList>(() => new ProjectList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectList(ProjectList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectList Clone() {
      return new ProjectList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_value_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> value_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPagedRankingListInput : pb::IMessage<GetPagedRankingListInput> {
    private static readonly pb::MessageParser<GetPagedRankingListInput> _parser = new pb::MessageParser<GetPagedRankingListInput>(() => new GetPagedRankingListInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPagedRankingListInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPagedRankingListInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPagedRankingListInput(GetPagedRankingListInput other) : this() {
      round_ = other.round_;
      page_ = other.page_;
      size_ = other.size_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPagedRankingListInput Clone() {
      return new GetPagedRankingListInput(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 2;
    private long page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private long size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPagedRankingListInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPagedRankingListInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      if (Page != other.Page) return false;
      if (Size != other.Size) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (Page != 0L) hash ^= Page.GetHashCode();
      if (Size != 0L) hash ^= Size.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Round);
      }
      if (Page != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Page);
      }
      if (Size != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Size);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (Page != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Page);
      }
      if (Size != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Size);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPagedRankingListInput other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      if (other.Page != 0L) {
        Page = other.Page;
      }
      if (other.Size != 0L) {
        Size = other.Size;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Round = input.ReadInt64();
            break;
          }
          case 16: {
            Page = input.ReadInt64();
            break;
          }
          case 24: {
            Size = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankingList : pb::IMessage<RankingList> {
    private static readonly pb::MessageParser<RankingList> _parser = new pb::MessageParser<RankingList>(() => new RankingList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankingList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankingList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankingList(RankingList other) : this() {
      unit_ = other.unit_;
      projects_ = other.projects_.Clone();
      votes_ = other.votes_.Clone();
      support_ = other.support_.Clone();
      grants_ = other.grants_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankingList Clone() {
      return new RankingList(this);
    }

    /// <summary>Field number for the "unit" field.</summary>
    public const int UnitFieldNumber = 1;
    private long unit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Unit {
      get { return unit_; }
      set {
        unit_ = value;
      }
    }

    /// <summary>Field number for the "projects" field.</summary>
    public const int ProjectsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_projects_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> projects_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Projects {
      get { return projects_; }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 3;
    private static readonly pb::FieldCodec<long> _repeated_votes_codec
        = pb::FieldCodec.ForInt64(26);
    private readonly pbc::RepeatedField<long> votes_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Votes {
      get { return votes_; }
    }

    /// <summary>Field number for the "support" field.</summary>
    public const int SupportFieldNumber = 4;
    private static readonly pb::FieldCodec<long> _repeated_support_codec
        = pb::FieldCodec.ForInt64(34);
    private readonly pbc::RepeatedField<long> support_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Support {
      get { return support_; }
    }

    /// <summary>Field number for the "grants" field.</summary>
    public const int GrantsFieldNumber = 5;
    private static readonly pb::FieldCodec<long> _repeated_grants_codec
        = pb::FieldCodec.ForInt64(42);
    private readonly pbc::RepeatedField<long> grants_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Grants {
      get { return grants_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankingList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankingList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Unit != other.Unit) return false;
      if(!projects_.Equals(other.projects_)) return false;
      if(!votes_.Equals(other.votes_)) return false;
      if(!support_.Equals(other.support_)) return false;
      if(!grants_.Equals(other.grants_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Unit != 0L) hash ^= Unit.GetHashCode();
      hash ^= projects_.GetHashCode();
      hash ^= votes_.GetHashCode();
      hash ^= support_.GetHashCode();
      hash ^= grants_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Unit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Unit);
      }
      projects_.WriteTo(output, _repeated_projects_codec);
      votes_.WriteTo(output, _repeated_votes_codec);
      support_.WriteTo(output, _repeated_support_codec);
      grants_.WriteTo(output, _repeated_grants_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Unit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Unit);
      }
      size += projects_.CalculateSize(_repeated_projects_codec);
      size += votes_.CalculateSize(_repeated_votes_codec);
      size += support_.CalculateSize(_repeated_support_codec);
      size += grants_.CalculateSize(_repeated_grants_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankingList other) {
      if (other == null) {
        return;
      }
      if (other.Unit != 0L) {
        Unit = other.Unit;
      }
      projects_.Add(other.projects_);
      votes_.Add(other.votes_);
      support_.Add(other.support_);
      grants_.Add(other.grants_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Unit = input.ReadInt64();
            break;
          }
          case 18: {
            projects_.AddEntriesFrom(input, _repeated_projects_codec);
            break;
          }
          case 26:
          case 24: {
            votes_.AddEntriesFrom(input, _repeated_votes_codec);
            break;
          }
          case 34:
          case 32: {
            support_.AddEntriesFrom(input, _repeated_support_codec);
            break;
          }
          case 42:
          case 40: {
            grants_.AddEntriesFrom(input, _repeated_grants_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoundInfo : pb::IMessage<RoundInfo> {
    private static readonly pb::MessageParser<RoundInfo> _parser = new pb::MessageParser<RoundInfo>(() => new RoundInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundInfo(RoundInfo other) : this() {
      startFrom_ = other.startFrom_ != null ? other.startFrom_.Clone() : null;
      endAt_ = other.endAt_ != null ? other.endAt_.Clone() : null;
      support_ = other.support_;
      preTaxSupport_ = other.preTaxSupport_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundInfo Clone() {
      return new RoundInfo(this);
    }

    /// <summary>Field number for the "start_from" field.</summary>
    public const int StartFromFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startFrom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartFrom {
      get { return startFrom_; }
      set {
        startFrom_ = value;
      }
    }

    /// <summary>Field number for the "end_at" field.</summary>
    public const int EndAtFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endAt_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndAt {
      get { return endAt_; }
      set {
        endAt_ = value;
      }
    }

    /// <summary>Field number for the "support" field.</summary>
    public const int SupportFieldNumber = 3;
    private long support_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Support {
      get { return support_; }
      set {
        support_ = value;
      }
    }

    /// <summary>Field number for the "pre_tax_support" field.</summary>
    public const int PreTaxSupportFieldNumber = 4;
    private long preTaxSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PreTaxSupport {
      get { return preTaxSupport_; }
      set {
        preTaxSupport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartFrom, other.StartFrom)) return false;
      if (!object.Equals(EndAt, other.EndAt)) return false;
      if (Support != other.Support) return false;
      if (PreTaxSupport != other.PreTaxSupport) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startFrom_ != null) hash ^= StartFrom.GetHashCode();
      if (endAt_ != null) hash ^= EndAt.GetHashCode();
      if (Support != 0L) hash ^= Support.GetHashCode();
      if (PreTaxSupport != 0L) hash ^= PreTaxSupport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (startFrom_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartFrom);
      }
      if (endAt_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndAt);
      }
      if (Support != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Support);
      }
      if (PreTaxSupport != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PreTaxSupport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startFrom_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartFrom);
      }
      if (endAt_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndAt);
      }
      if (Support != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Support);
      }
      if (PreTaxSupport != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PreTaxSupport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundInfo other) {
      if (other == null) {
        return;
      }
      if (other.startFrom_ != null) {
        if (startFrom_ == null) {
          StartFrom = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartFrom.MergeFrom(other.StartFrom);
      }
      if (other.endAt_ != null) {
        if (endAt_ == null) {
          EndAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndAt.MergeFrom(other.EndAt);
      }
      if (other.Support != 0L) {
        Support = other.Support;
      }
      if (other.PreTaxSupport != 0L) {
        PreTaxSupport = other.PreTaxSupport;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startFrom_ == null) {
              StartFrom = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartFrom);
            break;
          }
          case 18: {
            if (endAt_ == null) {
              EndAt = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndAt);
            break;
          }
          case 24: {
            Support = input.ReadInt64();
            break;
          }
          case 32: {
            PreTaxSupport = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetVotingCostInput : pb::IMessage<GetVotingCostInput> {
    private static readonly pb::MessageParser<GetVotingCostInput> _parser = new pb::MessageParser<GetVotingCostInput>(() => new GetVotingCostInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetVotingCostInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVotingCostInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVotingCostInput(GetVotingCostInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      projectId_ = other.projectId_;
      votes_ = other.votes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetVotingCostInput Clone() {
      return new GetVotingCostInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Types.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "votes" field.</summary>
    public const int VotesFieldNumber = 3;
    private long votes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Votes {
      get { return votes_; }
      set {
        votes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetVotingCostInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetVotingCostInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Votes != other.Votes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Votes != 0L) hash ^= Votes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectId);
      }
      if (Votes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Votes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Votes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Votes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetVotingCostInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Types.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Votes != 0L) {
        Votes = other.Votes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Types.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            ProjectId = input.ReadString();
            break;
          }
          case 24: {
            Votes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VotingCost : pb::IMessage<VotingCost> {
    private static readonly pb::MessageParser<VotingCost> _parser = new pb::MessageParser<VotingCost>(() => new VotingCost());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VotingCost> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingCost() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingCost(VotingCost other) : this() {
      cost_ = other.cost_;
      votable_ = other.votable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingCost Clone() {
      return new VotingCost(this);
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 1;
    private long cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    /// <summary>Field number for the "votable" field.</summary>
    public const int VotableFieldNumber = 2;
    private bool votable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Votable {
      get { return votable_; }
      set {
        votable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VotingCost);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VotingCost other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cost != other.Cost) return false;
      if (Votable != other.Votable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cost != 0L) hash ^= Cost.GetHashCode();
      if (Votable != false) hash ^= Votable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cost != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Cost);
      }
      if (Votable != false) {
        output.WriteRawTag(16);
        output.WriteBool(Votable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (Votable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VotingCost other) {
      if (other == null) {
        return;
      }
      if (other.Cost != 0L) {
        Cost = other.Cost;
      }
      if (other.Votable != false) {
        Votable = other.Votable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Cost = input.ReadInt64();
            break;
          }
          case 16: {
            Votable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Grants : pb::IMessage<Grants> {
    private static readonly pb::MessageParser<Grants> _parser = new pb::MessageParser<Grants>(() => new Grants());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Grants> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grants() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grants(Grants other) : this() {
      rest_ = other.rest_;
      total_ = other.total_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Grants Clone() {
      return new Grants(this);
    }

    /// <summary>Field number for the "rest" field.</summary>
    public const int RestFieldNumber = 1;
    private long rest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Rest {
      get { return rest_; }
      set {
        rest_ = value;
      }
    }

    /// <summary>Field number for the "total" field.</summary>
    public const int TotalFieldNumber = 2;
    private long total_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Total {
      get { return total_; }
      set {
        total_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Grants);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Grants other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rest != other.Rest) return false;
      if (Total != other.Total) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Rest != 0L) hash ^= Rest.GetHashCode();
      if (Total != 0L) hash ^= Total.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Rest != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Rest);
      }
      if (Total != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Total);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Rest != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rest);
      }
      if (Total != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Total);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Grants other) {
      if (other == null) {
        return;
      }
      if (other.Rest != 0L) {
        Rest = other.Rest;
      }
      if (other.Total != 0L) {
        Total = other.Total;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Rest = input.ReadInt64();
            break;
          }
          case 16: {
            Total = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalculateProjectIdInput : pb::IMessage<CalculateProjectIdInput> {
    private static readonly pb::MessageParser<CalculateProjectIdInput> _parser = new pb::MessageParser<CalculateProjectIdInput>(() => new CalculateProjectIdInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalculateProjectIdInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateProjectIdInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateProjectIdInput(CalculateProjectIdInput other) : this() {
      address_ = other.address_ != null ? other.address_.Clone() : null;
      bid_ = other.bid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalculateProjectIdInput Clone() {
      return new CalculateProjectIdInput(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private global::AElf.Types.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "bid" field.</summary>
    public const int BidFieldNumber = 2;
    private int bid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Bid {
      get { return bid_; }
      set {
        bid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalculateProjectIdInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalculateProjectIdInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Address, other.Address)) return false;
      if (Bid != other.Bid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Bid != 0) hash ^= Bid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (address_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Address);
      }
      if (Bid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Bid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Bid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalculateProjectIdInput other) {
      if (other == null) {
        return;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Types.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Bid != 0) {
        Bid = other.Bid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (address_ == null) {
              Address = new global::AElf.Types.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 16: {
            Bid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DangerSetTimeInput : pb::IMessage<DangerSetTimeInput> {
    private static readonly pb::MessageParser<DangerSetTimeInput> _parser = new pb::MessageParser<DangerSetTimeInput>(() => new DangerSetTimeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DangerSetTimeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DangerSetTimeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DangerSetTimeInput(DangerSetTimeInput other) : this() {
      start_ = other.start_ != null ? other.start_.Clone() : null;
      end_ = other.end_ != null ? other.end_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DangerSetTimeInput Clone() {
      return new DangerSetTimeInput(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "end" field.</summary>
    public const int EndFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp end_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp End {
      get { return end_; }
      set {
        end_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DangerSetTimeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DangerSetTimeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (!object.Equals(End, other.End)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (start_ != null) hash ^= Start.GetHashCode();
      if (end_ != null) hash ^= End.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (start_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (end_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(End);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (start_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (end_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(End);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DangerSetTimeInput other) {
      if (other == null) {
        return;
      }
      if (other.start_ != null) {
        if (start_ == null) {
          Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Start.MergeFrom(other.Start);
      }
      if (other.end_ != null) {
        if (end_ == null) {
          End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        End.MergeFrom(other.End);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (start_ == null) {
              Start = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Start);
            break;
          }
          case 18: {
            if (end_ == null) {
              End = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(End);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectBanned : pb::IMessage<ProjectBanned> {
    private static readonly pb::MessageParser<ProjectBanned> _parser = new pb::MessageParser<ProjectBanned>(() => new ProjectBanned());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectBanned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectBanned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectBanned(ProjectBanned other) : this() {
      project_ = other.project_;
      ban_ = other.ban_;
      round_ = other.round_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectBanned Clone() {
      return new ProjectBanned(this);
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 1;
    private string project_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ban" field.</summary>
    public const int BanFieldNumber = 2;
    private bool ban_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Ban {
      get { return ban_; }
      set {
        ban_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 3;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectBanned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectBanned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Project != other.Project) return false;
      if (Ban != other.Ban) return false;
      if (Round != other.Round) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (Ban != false) hash ^= Ban.GetHashCode();
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Project.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Project);
      }
      if (Ban != false) {
        output.WriteRawTag(16);
        output.WriteBool(Ban);
      }
      if (Round != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Round);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (Ban != false) {
        size += 1 + 1;
      }
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectBanned other) {
      if (other == null) {
        return;
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.Ban != false) {
        Ban = other.Ban;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Project = input.ReadString();
            break;
          }
          case 16: {
            Ban = input.ReadBool();
            break;
          }
          case 24: {
            Round = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TaxPointChanged : pb::IMessage<TaxPointChanged> {
    private static readonly pb::MessageParser<TaxPointChanged> _parser = new pb::MessageParser<TaxPointChanged>(() => new TaxPointChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TaxPointChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxPointChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxPointChanged(TaxPointChanged other) : this() {
      taxPoint_ = other.taxPoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TaxPointChanged Clone() {
      return new TaxPointChanged(this);
    }

    /// <summary>Field number for the "tax_point" field.</summary>
    public const int TaxPointFieldNumber = 1;
    private long taxPoint_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TaxPoint {
      get { return taxPoint_; }
      set {
        taxPoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TaxPointChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TaxPointChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaxPoint != other.TaxPoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaxPoint != 0L) hash ^= TaxPoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TaxPoint != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TaxPoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaxPoint != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaxPoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TaxPointChanged other) {
      if (other == null) {
        return;
      }
      if (other.TaxPoint != 0L) {
        TaxPoint = other.TaxPoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TaxPoint = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoundIntervalChanged : pb::IMessage<RoundIntervalChanged> {
    private static readonly pb::MessageParser<RoundIntervalChanged> _parser = new pb::MessageParser<RoundIntervalChanged>(() => new RoundIntervalChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundIntervalChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundIntervalChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundIntervalChanged(RoundIntervalChanged other) : this() {
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundIntervalChanged Clone() {
      return new RoundIntervalChanged(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private long interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundIntervalChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundIntervalChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Interval != other.Interval) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0L) hash ^= Interval.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Interval);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundIntervalChanged other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0L) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Interval = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VotingUnitChanged : pb::IMessage<VotingUnitChanged> {
    private static readonly pb::MessageParser<VotingUnitChanged> _parser = new pb::MessageParser<VotingUnitChanged>(() => new VotingUnitChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VotingUnitChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingUnitChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingUnitChanged(VotingUnitChanged other) : this() {
      votingUnit_ = other.votingUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingUnitChanged Clone() {
      return new VotingUnitChanged(this);
    }

    /// <summary>Field number for the "voting_unit" field.</summary>
    public const int VotingUnitFieldNumber = 1;
    private long votingUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VotingUnit {
      get { return votingUnit_; }
      set {
        votingUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VotingUnitChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VotingUnitChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VotingUnit != other.VotingUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VotingUnit != 0L) hash ^= VotingUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VotingUnit != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(VotingUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VotingUnit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VotingUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VotingUnitChanged other) {
      if (other == null) {
        return;
      }
      if (other.VotingUnit != 0L) {
        VotingUnit = other.VotingUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            VotingUnit = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Voted : pb::IMessage<Voted> {
    private static readonly pb::MessageParser<Voted> _parser = new pb::MessageParser<Voted>(() => new Voted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Voted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voted(Voted other) : this() {
      account_ = other.account_ != null ? other.account_.Clone() : null;
      project_ = other.project_;
      vote_ = other.vote_;
      round_ = other.round_;
      grants_ = other.grants_;
      supportArea_ = other.supportArea_;
      cost_ = other.cost_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voted Clone() {
      return new Voted(this);
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 1;
    private global::AElf.Types.Address account_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Account {
      get { return account_; }
      set {
        account_ = value;
      }
    }

    /// <summary>Field number for the "project" field.</summary>
    public const int ProjectFieldNumber = 2;
    private string project_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Project {
      get { return project_; }
      set {
        project_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vote" field.</summary>
    public const int VoteFieldNumber = 3;
    private long vote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Vote {
      get { return vote_; }
      set {
        vote_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 4;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "grants" field.</summary>
    public const int GrantsFieldNumber = 5;
    private long grants_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Grants {
      get { return grants_; }
      set {
        grants_ = value;
      }
    }

    /// <summary>Field number for the "support_area" field.</summary>
    public const int SupportAreaFieldNumber = 6;
    private long supportArea_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SupportArea {
      get { return supportArea_; }
      set {
        supportArea_ = value;
      }
    }

    /// <summary>Field number for the "cost" field.</summary>
    public const int CostFieldNumber = 7;
    private long cost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Cost {
      get { return cost_; }
      set {
        cost_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Voted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Voted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Account, other.Account)) return false;
      if (Project != other.Project) return false;
      if (Vote != other.Vote) return false;
      if (Round != other.Round) return false;
      if (Grants != other.Grants) return false;
      if (SupportArea != other.SupportArea) return false;
      if (Cost != other.Cost) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (account_ != null) hash ^= Account.GetHashCode();
      if (Project.Length != 0) hash ^= Project.GetHashCode();
      if (Vote != 0L) hash ^= Vote.GetHashCode();
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (Grants != 0L) hash ^= Grants.GetHashCode();
      if (SupportArea != 0L) hash ^= SupportArea.GetHashCode();
      if (Cost != 0L) hash ^= Cost.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (account_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Account);
      }
      if (Project.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Project);
      }
      if (Vote != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Vote);
      }
      if (Round != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Round);
      }
      if (Grants != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Grants);
      }
      if (SupportArea != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(SupportArea);
      }
      if (Cost != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(Cost);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (account_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
      }
      if (Project.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Project);
      }
      if (Vote != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Vote);
      }
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (Grants != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Grants);
      }
      if (SupportArea != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SupportArea);
      }
      if (Cost != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Cost);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Voted other) {
      if (other == null) {
        return;
      }
      if (other.account_ != null) {
        if (account_ == null) {
          Account = new global::AElf.Types.Address();
        }
        Account.MergeFrom(other.Account);
      }
      if (other.Project.Length != 0) {
        Project = other.Project;
      }
      if (other.Vote != 0L) {
        Vote = other.Vote;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      if (other.Grants != 0L) {
        Grants = other.Grants;
      }
      if (other.SupportArea != 0L) {
        SupportArea = other.SupportArea;
      }
      if (other.Cost != 0L) {
        Cost = other.Cost;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (account_ == null) {
              Account = new global::AElf.Types.Address();
            }
            input.ReadMessage(Account);
            break;
          }
          case 18: {
            Project = input.ReadString();
            break;
          }
          case 24: {
            Vote = input.ReadInt64();
            break;
          }
          case 32: {
            Round = input.ReadInt64();
            break;
          }
          case 40: {
            Grants = input.ReadInt64();
            break;
          }
          case 48: {
            SupportArea = input.ReadInt64();
            break;
          }
          case 56: {
            Cost = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProjectUploaded : pb::IMessage<ProjectUploaded> {
    private static readonly pb::MessageParser<ProjectUploaded> _parser = new pb::MessageParser<ProjectUploaded>(() => new ProjectUploaded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProjectUploaded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectUploaded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectUploaded(ProjectUploaded other) : this() {
      uploader_ = other.uploader_ != null ? other.uploader_.Clone() : null;
      projectId_ = other.projectId_;
      round_ = other.round_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProjectUploaded Clone() {
      return new ProjectUploaded(this);
    }

    /// <summary>Field number for the "uploader" field.</summary>
    public const int UploaderFieldNumber = 1;
    private global::AElf.Types.Address uploader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Types.Address Uploader {
      get { return uploader_; }
      set {
        uploader_ = value;
      }
    }

    /// <summary>Field number for the "project_id" field.</summary>
    public const int ProjectIdFieldNumber = 2;
    private string projectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProjectId {
      get { return projectId_; }
      set {
        projectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 3;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProjectUploaded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProjectUploaded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Uploader, other.Uploader)) return false;
      if (ProjectId != other.ProjectId) return false;
      if (Round != other.Round) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uploader_ != null) hash ^= Uploader.GetHashCode();
      if (ProjectId.Length != 0) hash ^= ProjectId.GetHashCode();
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (uploader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Uploader);
      }
      if (ProjectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProjectId);
      }
      if (Round != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Round);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uploader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uploader);
      }
      if (ProjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProjectId);
      }
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProjectUploaded other) {
      if (other == null) {
        return;
      }
      if (other.uploader_ != null) {
        if (uploader_ == null) {
          Uploader = new global::AElf.Types.Address();
        }
        Uploader.MergeFrom(other.Uploader);
      }
      if (other.ProjectId.Length != 0) {
        ProjectId = other.ProjectId;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (uploader_ == null) {
              Uploader = new global::AElf.Types.Address();
            }
            input.ReadMessage(Uploader);
            break;
          }
          case 18: {
            ProjectId = input.ReadString();
            break;
          }
          case 24: {
            Round = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SupportUpdated : pb::IMessage<SupportUpdated> {
    private static readonly pb::MessageParser<SupportUpdated> _parser = new pb::MessageParser<SupportUpdated>(() => new SupportUpdated());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SupportUpdated> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportUpdated() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportUpdated(SupportUpdated other) : this() {
      support_ = other.support_;
      round_ = other.round_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SupportUpdated Clone() {
      return new SupportUpdated(this);
    }

    /// <summary>Field number for the "support" field.</summary>
    public const int SupportFieldNumber = 1;
    private long support_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Support {
      get { return support_; }
      set {
        support_ = value;
      }
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 2;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SupportUpdated);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SupportUpdated other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Support != other.Support) return false;
      if (Round != other.Round) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Support != 0L) hash ^= Support.GetHashCode();
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Support != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Support);
      }
      if (Round != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Round);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Support != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Support);
      }
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SupportUpdated other) {
      if (other == null) {
        return;
      }
      if (other.Support != 0L) {
        Support = other.Support;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Support = input.ReadInt64();
            break;
          }
          case 16: {
            Round = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoundStarted : pb::IMessage<RoundStarted> {
    private static readonly pb::MessageParser<RoundStarted> _parser = new pb::MessageParser<RoundStarted>(() => new RoundStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoundStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.QuadraticFunding.QuadraticFundingContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundStarted(RoundStarted other) : this() {
      round_ = other.round_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoundStarted Clone() {
      return new RoundStarted(this);
    }

    /// <summary>Field number for the "round" field.</summary>
    public const int RoundFieldNumber = 1;
    private long round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoundStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoundStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Round != other.Round) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Round != 0L) hash ^= Round.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Round != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Round);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Round != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Round);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoundStarted other) {
      if (other == null) {
        return;
      }
      if (other.Round != 0L) {
        Round = other.Round;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Round = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
